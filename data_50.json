{"url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50", "repository_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning", "labels_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50/comments", "events_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50/events", "html_url": "https://github.com/PyTorchLightning/pytorch-lightning/issues/50", "id": 477624852, "node_id": "MDU6SXNzdWU0Nzc2MjQ4NTI=", "number": 50, "title": "self-balancing architecture", "user": {"login": "williamFalcon", "id": 3640001, "node_id": "MDQ6VXNlcjM2NDAwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/3640001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williamFalcon", "html_url": "https://github.com/williamFalcon", "followers_url": "https://api.github.com/users/williamFalcon/followers", "following_url": "https://api.github.com/users/williamFalcon/following{/other_user}", "gists_url": "https://api.github.com/users/williamFalcon/gists{/gist_id}", "starred_url": "https://api.github.com/users/williamFalcon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williamFalcon/subscriptions", "organizations_url": "https://api.github.com/users/williamFalcon/orgs", "repos_url": "https://api.github.com/users/williamFalcon/repos", "events_url": "https://api.github.com/users/williamFalcon/events{/privacy}", "received_events_url": "https://api.github.com/users/williamFalcon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1297090688, "node_id": "MDU6TGFiZWwxMjk3MDkwNjg4", "url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/labels/feature", "name": "feature", "color": "a2eeef", "default": false, "description": "Is an improvement or enhancement"}, {"id": 1297090689, "node_id": "MDU6TGFiZWwxMjk3MDkwNjg5", "url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Open to be worked on"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/milestones/30", "html_url": "https://github.com/PyTorchLightning/pytorch-lightning/milestone/30", "labels_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/milestones/30/labels", "id": 7630747, "node_id": "MI_kwDOCqWgoM4AdG-b", "number": 30, "title": "future", "description": "Valuable work with no set milestone.", "creator": {"login": "carmocca", "id": 11067892, "node_id": "MDQ6VXNlcjExMDY3ODky", "avatar_url": "https://avatars.githubusercontent.com/u/11067892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carmocca", "html_url": "https://github.com/carmocca", "followers_url": "https://api.github.com/users/carmocca/followers", "following_url": "https://api.github.com/users/carmocca/following{/other_user}", "gists_url": "https://api.github.com/users/carmocca/gists{/gist_id}", "starred_url": "https://api.github.com/users/carmocca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carmocca/subscriptions", "organizations_url": "https://api.github.com/users/carmocca/orgs", "repos_url": "https://api.github.com/users/carmocca/repos", "events_url": "https://api.github.com/users/carmocca/events{/privacy}", "received_events_url": "https://api.github.com/users/carmocca/received_events", "type": "User", "site_admin": false}, "open_issues": 68, "closed_issues": 1, "state": "open", "created_at": "2022-02-01T16:43:16Z", "updated_at": "2022-03-02T16:11:32Z", "due_on": null, "closed_at": null}, "comments": 9, "created_at": "2019-08-06T22:39:18Z", "updated_at": "2022-02-01T16:43:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a really awesome feature we're looking to add. Super hard problem also if any ninjas want to try to tackle it :)  (you'll be legendary haha).\r\n\r\nProblem:\r\nSome models are too big to fit in memory. Thus can't do any distributed training currently available (even in PyTorch).\r\n\r\nBut... we can break up the model and put parts on each GPU. The trick though is to do it automatically, because manually doing this is a PITA (trust me, i spend weeks dealing with this haha).\r\n\r\nProposed solution:\r\nUser hook in LightningModule where user returns the modules they want balanced.\r\n\r\n```python\r\n\r\nclass MyModule(LightningModule):\r\n    def __init__(...):\r\n        self.model_a = SomeModel()\r\n        self.layer_1 = Linear(...)\r\n        self.layer2 = Linear(...)\r\n\r\n    def forward(x):\r\n       # in each of these module calls, auto place the input x on the gpu of the module\r\n        x = self.model_a(x)\r\n\r\n       # in each of these module calls, auto place the input x on the gpu of the module\r\n        x = self.layer_1(x)\r\n\r\n       # in each of these module calls, auto place the input x on the gpu of the module\r\n        x = self.layer_2(x)\r\n        return x\r\n\r\n    def self_balance():\r\n        return [self.model_a, self.layer_1, self.layer_2]\r\n\r\n```\r\n\r\nSo the above does two cool things:\r\n1. user says how they want to break up the model.\r\n2. In the forward, we auto put the input on that module's GPU.    \r\n\r\nThat's the easy part lol... the hard part is deciding how to balance... optimizing for speed so you minimize data transfer across GPUs while not blowing up the RAM and using the RAM efficiently.\r\n\r\nAnyone want to give this a shot? \r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50/reactions", "total_count": 12, "+1": 12, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/PyTorchLightning/pytorch-lightning/issues/50/timeline", "performed_via_github_app": null}